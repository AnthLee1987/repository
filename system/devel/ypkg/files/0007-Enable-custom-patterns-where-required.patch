From e2f85260a9e9dafdc89a7047e88fcaebdc907aed Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Fri, 24 Apr 2015 04:24:02 +0100
Subject: [PATCH 7/7] Enable custom patterns where required

---
 packageit.py | 37 +++++++++++++++++++++++++------------
 sanity.py    | 35 +++++++++++++++++++++++++++++++++++
 2 files changed, 60 insertions(+), 12 deletions(-)

diff --git a/packageit.py b/packageit.py
index 1a4337f..ac93578 100644
--- a/packageit.py
+++ b/packageit.py
@@ -144,17 +144,24 @@ def packageit(ymlFile, installDIR, outputXML):
     rtable["/usr/lib32/lib*.so"] = libdr32
     rtable["/usr/lib32/lib*.a"] = libar32
 
+    tables = list()
+    if sanity.pkg_patterns:
+        tables.append(sanity.pkg_patterns)
+    tables.append(patterns)
+
     def hasMatch(path):
-        for p in patterns:
-            if p in rtable:
-                b = rtable[p].match(path)
-            else:
-                b = fnmatch.fnmatch(path, p)
-                if not b:
-                    b = path.startswith(p)
-            if b:
-                return (p,patterns[p])
-        return (None,None)
+        for table in tables:
+            for p in table:
+                if p in rtable:
+                    b = rtable[p].match(path)
+                else:
+                    b = fnmatch.fnmatch(path, p)
+                    if not b:
+                        b = path.startswith(p)
+                if b:
+                    return (p,table[p])
+            if table == patterns:
+                return (None,None)
 
     # I am not proud of the following code.
     pkgFiles = dict()
@@ -230,6 +237,10 @@ def packageit(ymlFile, installDIR, outputXML):
     summaries["-docs"] = "Documentation for %s" % name
     summaries["-32bit"] = "32-bit libraries for %s" % name
 
+    # Reserved but unmapped..
+    
+    summaries["-utils"] = "Utilities for %s" % name
+
     for pkg in pkgFiles:
         type = "data"
         fq = pkg
@@ -263,9 +274,9 @@ def packageit(ymlFile, installDIR, outputXML):
                 type = "localedata"
             elif file.startswith("/usr/include"):
                 type = "header"
-            elif file.startswith("/usr/bin"):
+            elif file.startswith("/usr/bin") or file.startswith("/bin"):
                 type = "executable"
-            elif file.startswith("/usr/sbin"):
+            elif file.startswith("/usr/sbin") or file.startswith("/sbin"):
                 type = "executable"
             elif file.startswith("/etc"):
                 type = "config"
@@ -287,6 +298,8 @@ def packageit(ymlFile, installDIR, outputXML):
                     package.partOf = "system.devel"
                 else:
                     package.partOf = "programming.devel"
+            elif fq.endswith("-docs"):
+                package.partOf = "programming.docs"
             package.packageDependencies.append(dep)
         else:
             if component:
diff --git a/sanity.py b/sanity.py
index ff9e715..9e83157 100644
--- a/sanity.py
+++ b/sanity.py
@@ -40,6 +40,9 @@ pkg_replaces = None
 global mutations
 mutations = None
 
+global pkg_patterns
+pkg_patterns = None
+
 def init_mutations():
     global mutations
 
@@ -49,6 +52,7 @@ def init_mutations():
         mutations["devel"] = "%s-devel" % name
         mutations["docs"] = "%s-docs" % name
         mutations["32bit"] = "%s-32bit" % name
+        mutations["utils"] = "%s-utils" % name
 
 def add_runtime_dep(pkg, dep):
     ''' Explicitly add a package to the runtime dependencies '''
@@ -97,6 +101,34 @@ def add_replaces(pkg, pkg2):
     if pkg2 not in pkg_replaces[pkgname]:
         pkg_replaces[pkgname].append(pkg2)
 
+def add_pattern(pkg, pattern):
+    ''' Explicitly add/override a default pattern '''
+    global mutations
+    global pkg_patterns
+
+    if not pkg or not pattern:
+        print "Required values missing for add_pattern"
+        sys.exit(1)
+
+    init_mutations()
+
+    pkgname = pkg
+    if pkgname not in mutations and pkgname != name:
+        print "Unsupported pattern name: %s" % pkg
+        sys.exit(1)
+
+    if pkgname != name:
+        pkgname = "-%s" % pkgname
+
+    if not pkg_patterns:
+        pkg_patterns = dict()
+
+    if pattern in pkg_patterns:
+        print "Duplicate pattern for %s: %s" % (pkg, pattern)
+        sys.exit(1)
+    pkg_patterns[pattern] = pkgname
+
+
 def assertGetString(y, n):
     ''' Ensure string value exists '''
     if n not in y:
@@ -342,6 +374,9 @@ def sane(fpath):
     if "replaces" in y:
         rpl = y["replaces"]
         do_multimap(rpl, "replaces", add_replaces)
+    if "patterns" in y:
+        pat = y["patterns"]
+        do_multimap(pat, "patterns", add_pattern)
 
     # Fuzzy.
     assertIsString(y, "setup")
-- 
2.3.2

