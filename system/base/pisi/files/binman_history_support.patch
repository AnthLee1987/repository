diff --git a/pisi/operations/history.py b/pisi/operations/history.py
index fcbc5ff..82825be 100644
--- a/pisi/operations/history.py
+++ b/pisi/operations/history.py
@@ -51,6 +51,33 @@ def __listactions(actions):
 
     return beinstalled, beremoved, configs
 
+def __getpackageurl_binman(package):
+	packagedb = pisi.db.packagedb.PackageDB()
+	repodb = pisi.db.repodb.RepoDB()
+	pkg, ver = pisi.util.parse_package_name(package)
+
+	reponame = None
+	try:
+		reponame = packagedb.which_repo(pkg)
+	except Exception:
+		# Maybe this package is obsoluted from repository
+		for repo in repodb.get_binary_repos():
+			if pkg in packagedb.get_obsoletes(repo):
+				reponame = repo
+
+	if not reponame:
+		raise PackageNotFound
+		
+	package_ = packagedb.get_package (pkg)
+	repourl = repodb.get_repo_url(reponame)
+	base_package = os.path.dirname (package_.packageURI)
+	repo_base = os.path.dirname (repourl)
+	possible_url = os.path.join (repo_base, base_package, package)
+	ctx.ui.info(_("Package %s found in repository %s") % (pkg, reponame))
+
+	#return _possible_ url for this package
+	return possible_url
+    	
 def __getpackageurl(package):
     packagedb = pisi.db.packagedb.PackageDB()
     repodb = pisi.db.repodb.RepoDB()
@@ -69,14 +96,12 @@ def __getpackageurl(package):
         raise PackageNotFound
 
     repourl = repodb.get_repo_url(reponame)
-    ctx.ui.info(_("Package %s found in repository %s") % (pkg, reponame))
-
     #return _possible_ url for this package
     return os.path.join(os.path.dirname(repourl), package)
 
 def fetch_remote_file(package, errors):
     try:
-        uri = pisi.file.File.make_uri(__getpackageurl(package))
+        uri = pisi.file.File.make_uri(__getpackageurl_binman(package))
     except PackageNotFound:
         errors.append(package)
         ctx.ui.info(pisi.util.colorize(_("%s could not be found") % (package), "red"))
@@ -85,12 +110,19 @@ def fetch_remote_file(package, errors):
     dest = ctx.config.cached_packages_dir()
     filepath = os.path.join(dest, uri.filename())
     if not os.path.exists(filepath):
+        failed = False		
         try:
             pisi.fetcher.fetch_url(uri, dest, ctx.ui.Progress)
         except pisi.fetcher.FetchError, e:
-            errors.append(package)
-            ctx.ui.info(pisi.util.colorize(_("%s could not be found") % (package), "red"))
-            return False
+            failed = True
+        if failed:
+			try:
+				new_uri = pisi.file.File.make_uri(__getpackageurl(package))
+				pisi.fetcher.fetch_url(new_uri, dest, ctx.ui.Progress)
+			except:
+				errors.append(package)
+				ctx.ui.info(pisi.util.colorize(_("%s could not be found") % (package), "red"))
+				return False
     else:
         ctx.ui.info(_('%s [cached]') % uri.filename())
     return True
