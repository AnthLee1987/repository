From b6ebb35cf84454afd534c3e3267f2d838deaa876 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey.doherty@gmail.com>
Date: Sat, 10 May 2014 19:15:59 +0100
Subject: [PATCH 2/2] Allow PkgConfig build dependencies for packages

Developers/packagers may now set a Dependency type to "pkgconfig" in their
build dependencies to have it automatically resolved to a package that
provides the relevant "pc" name (i.e. liblzma)
---
 pisi-spec.dtd            |  1 +
 pisi-spec.rng            |  3 +++
 pisi/db/installdb.py     |  8 ++++++++
 pisi/db/packagedb.py     |  9 +++++++++
 pisi/dependency.py       | 12 ++++++++++++
 pisi/operations/build.py | 13 ++++++++++++-
 pisi/relation.py         |  6 ++++++
 7 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/pisi-spec.dtd b/pisi-spec.dtd
index 903edc9..a5d9448 100644
--- a/pisi-spec.dtd
+++ b/pisi-spec.dtd
@@ -71,6 +71,7 @@
 <!ATTLIST Dependency releaseFrom CDATA #IMPLIED>
 <!ATTLIST Dependency releaseTo CDATA #IMPLIED>
 <!ATTLIST Dependency release CDATA #IMPLIED>
+<!ATTLIST Dependency type CDATA #IMPLIED>
 
 <!ELEMENT Patches (Patch*)>
 
diff --git a/pisi-spec.rng b/pisi-spec.rng
index 4306ee6..c0ec94d 100644
--- a/pisi-spec.rng
+++ b/pisi-spec.rng
@@ -1431,6 +1431,9 @@
             <optional>
                 <attribute name="release"/>
             </optional>
+            <optional>
+                <attribute name="pkgconfig"/>
+            </optional>
         </group>
     </define>
 
diff --git a/pisi/db/installdb.py b/pisi/db/installdb.py
index 7f4cc3f..b31acf5 100644
--- a/pisi/db/installdb.py
+++ b/pisi/db/installdb.py
@@ -258,6 +258,14 @@ class InstallDB(lazydb.LazyDB):
         metadata.read(metadata_xml)
         return metadata.package
 
+    def get_package_by_pkgconfig(self, pkgconfig):
+        for item in self.list_installed():
+            pkg = self.get_package(item)
+            if pkg.providesPkgConfig:
+                for pc in pkg.providesPkgConfig:
+                    if pc.om == pkgconfig:
+                        return pkg
+
     def __mark_package(self, _type, package):
         packages = self.__get_marked_packages(_type)
         if package not in packages:
diff --git a/pisi/db/packagedb.py b/pisi/db/packagedb.py
index 8fa961a..c682b9b 100644
--- a/pisi/db/packagedb.py
+++ b/pisi/db/packagedb.py
@@ -84,6 +84,15 @@ class PackageDB(lazydb.LazyDB):
         pkg, repo = self.get_package_repo(name, repo)
         return pkg
 
+    def get_package_by_pkgconfig(self, pkgconfig):
+        for item in self.list_packages(None):
+            pkg = self.get_package(item)
+            if pkg.providesPkgConfig:
+                for pc in pkg.providesPkgConfig:
+                    if pc.om == pkgconfig:
+                        return pkg
+        return None
+
     def search_in_packages(self, packages, terms, lang=None):
         resum = '<Summary xml:lang=.(%s|en).>.*?%s.*?</Summary>'
         redesc = '<Description xml:lang=.(%s|en).>.*?%s.*?</Description>'
diff --git a/pisi/dependency.py b/pisi/dependency.py
index 9595698..2c220e8 100644
--- a/pisi/dependency.py
+++ b/pisi/dependency.py
@@ -18,8 +18,12 @@ _ = __trans.ugettext
 
 import pisi.relation
 import pisi.db
+import pisi.pxml.autoxml as autoxml
 
 class Dependency(pisi.relation.Relation):
+
+    a_type = [autoxml.String, autoxml.optional]
+
     def __str__(self):
         s = self.package
         if self.versionFrom:
@@ -34,6 +38,8 @@ class Dependency(pisi.relation.Relation):
             s += _(" release <= ") + self.releaseTo
         if self.release:
             s += _(" release ") + self.release
+        if self.type:
+            s += " (" + self.type + ")"
         return s
 
     def name(self):
@@ -51,6 +57,12 @@ class Dependency(pisi.relation.Relation):
 
     def satisfied_by_repo(self):
         packagedb = pisi.db.packagedb.PackageDB()
+        if self.type == "pkgconfig":
+            pkg = packagedb.get_package_by_pkgconfig(self.package)
+            if pkg:
+                return self.satisfies_relation(pkg.version, pkg.release)
+            else:
+                return False
         if not packagedb.has_package(self.package):
             return False
         else:
diff --git a/pisi/operations/build.py b/pisi/operations/build.py
index 53a6b11..a49ee1d 100644
--- a/pisi/operations/build.py
+++ b/pisi/operations/build.py
@@ -198,6 +198,7 @@ class Builder:
 
         self.componentdb = pisi.db.componentdb.ComponentDB()
         self.installdb = pisi.db.installdb.InstallDB()
+        self.packagedb = pisi.db.packagedb.PackageDB()
 
         # process args
         if not isinstance(specuri, pisi.uri.URI):
@@ -805,6 +806,9 @@ class Builder:
         for dep in build_deps:
             if not dep.satisfied_by_installed():
                 dep_unsatis.append(dep)
+            else:
+                if dep.type == "pkgconfig":
+                    ctx.ui.info("%s pkgconfig dependency provided by %s" % (dep.package, self.installdb.get_package_by_pkgconfig(dep.package).name))
 
         if dep_unsatis:
             ctx.ui.info(_("Unsatisfied Build Dependencies:") + ' '
@@ -820,7 +824,14 @@ class Builder:
                 if ctx.ui.confirm(
                 _('Do you want to install the unsatisfied build dependencies')):
                     ctx.ui.info(_('Installing build dependencies.'))
-                    if not pisi.api.install([dep.package for dep in dep_unsatis], reinstall=True):
+                    depsResolved = list()
+                    for dep in dep_unsatis:
+                        if dep.type == "pkgconfig":
+                            depappend = self.packagedb.get_package_by_pkgconfig(dep.package)
+                            depsResolved.append(depappend.name)
+                        else:
+                            depsResolved.append(dep.package)
+                    if not pisi.api.install([dep for dep in depsResolved], reinstall=True):
                         fail()
                 else:
                     fail()
diff --git a/pisi/relation.py b/pisi/relation.py
index 62c920a..b5115a8 100644
--- a/pisi/relation.py
+++ b/pisi/relation.py
@@ -57,6 +57,12 @@ class Relation:
 def installed_package_satisfies(relation):
     installdb = pisi.db.installdb.InstallDB()
     pkg_name = relation.package
+    if relation.type == "pkgconfig":
+        pkg = installdb.get_package_by_pkgconfig(pkg_name)
+        if pkg:
+            return relation.satisfies_relation(pkg.version, pkg.release)
+        else:
+            return False
     if not installdb.has_package(pkg_name):
         return False
     else:
-- 
1.9.1

